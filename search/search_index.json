{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SQLDQ","text":"<p><code>SQLDQ</code> is a Data Quality Testing library that keeps it simple and flexible.</p> <p>Simply use SQL to define your checks.</p>"},{"location":"#support","title":"Support","text":"<p>You can run data quality checks on:</p> <ul> <li>In-memory:<ul> <li>Pandas (<code>.from_duckdb</code>)</li> <li>Polars (<code>.from_duckdb</code>)</li> <li>Pyspark (<code>.from_pyspark</code>), requires <code>pyspark&gt;=3.4.0</code></li> </ul> </li> <li>Remotely, only results are collected:<ul> <li>Postgres (<code>.from_postgresql</code>)</li> <li>AWS Athena (<code>.from_athena</code>)</li> </ul> </li> <li>Everything else supported by DuckDB</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p><code>pip install sqldq</code> / <code>uv pip install sqldq</code></p> <p>You also need to install the corresponding libraries for your backend of choice, .e.g. <code>duckdb</code> when using <code>.from_duckdb</code>. <code>sqldq</code>`s error messages will also inform you about missing dependencies.</p>"},{"location":"#examples","title":"Examples","text":"<p>To see all of its features and examples for all supported backends, see the <code>demo</code> folder.</p> <p>The basic workflow is as follows:</p> <pre><code>from sqldq import SQLDQ\nimport duckdb\nimport polars as pl\n\n# Sample data\ndf_users = pl.DataFrame({\n    \"user_id\": [1, 2, 2],          # Duplicate user_id=2\n    \"age\": [25, 150, 45],          # Age 150 is an unplausible outlier\n    \"email\": [\"user1@example.com\",\n              \"user2@example.com\",\n              \"invalid-email\"],    # Invalid email\n})\n\n# Connect via DuckDB\ncon = duckdb.connect()\ncon.register(\"users\", df_users)\n\ndq = SQLDQ.from_duckdb(connection=con)\n\n# Define DQ checks\ndq = (\n    dq.add_check(\n        name=\"check_duplicate_user_id\",\n        failure_rows_query=\"\"\"\n            WITH duplicate_users AS (\n                SELECT user_id, COUNT(*) AS count\n                FROM users\n                GROUP BY user_id\n            )\n                SELECT user_id\n                FROM duplicate_users\n                WHERE count &gt; 1\"\"\")\n    .add_check(\n        name=\"check_invalid_email\",\n        failure_rows_query=\"\"\"\n            SELECT user_id\n            FROM users\n            WHERE email NOT LIKE '%_@__%.__%'\n        \"\"\")\n    .add_check(\n        name=\"check_age_outlier\",\n        failure_rows_query=\"\"\"\n            SELECT user_id, age\n            FROM users\n            WHERE age NOT BETWEEN 0 AND 120\"\"\"))\n\n# Run checks\nresult = dq.execute()\n\n# Report on results\nreport = result.report(include_rows=True,\n                       include_summary_header=True,\n                       fail_only=True)\nprint(report)\n\n# Control flow\nif result.has_failures():\n    print(\"Checks failed. here we can take custom actions.\")\n</code></pre>"},{"location":"#development","title":"Development","text":"<pre><code># open devcontainer\nuv sync\nsource .venv/bin/activate\nmake check\n</code></pre>"},{"location":"backends/","title":"Backends","text":""},{"location":"backends/#duckdb","title":"DuckDB","text":""},{"location":"backends/#pyspark","title":"Pyspark","text":""},{"location":"backends/#postgressql","title":"PostgresSQL","text":""},{"location":"backends/#athena","title":"Athena","text":""},{"location":"exports/","title":"Exports","text":""},{"location":"exports/#parquet","title":"Parquet","text":""},{"location":"exports/#csv","title":"CSV","text":""},{"location":"reporting/","title":"Reporting","text":""},{"location":"reporting/#text","title":"Text","text":""},{"location":"reporting/#html","title":"HTML","text":""},{"location":"reporting/#markdown","title":"Markdown","text":""}]}